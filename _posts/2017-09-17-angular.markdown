---
layout:     post
title:      "Angularar入门--开发环境的搭建"
subtitle:   "Upgrading Ele.me to Progressive Web App"
date:       2017-09-17 12:00:00
author:     "ddxg"
header-img: "img/in-post/angular4.0.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 前端开发
    - Angular
---


下周将会接触评审团后台页面，使用的是框架是angular，之前没有学过这个框架，现在赶紧补一下，避免下周什么都不懂。

-------------------

## 步骤一：设置开发环境

 - **安装node.js和npm**
之前使用过vue，这两个也装过了。可以百度，有许多博客介绍安装的。
 - **全局安装Angular CLI**
```
	  npm install -g @angular/cli
```
 安装完后，输入 ```ng -v``` 命令，有如下界面则说明安装成功
 ![Angular CLI的版本](http://img.blog.csdn.net/20170917154110050?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQWxpZ3VhZ3Vh/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

## 步骤二：创建一个项目
运行下列命令来在当前目录生成一个新项目以及应用的骨架代码

```
ng new my-first
```
>my-first就是项目的文件夹名称，接下来就会在目录中生成很多的文件，你首先要看的文件是README.md。 它提供了一些如何使用CLI命令的基础信息。 如果你想了解 Angular CLI 的工作原理，请访问 Angular CLI 的仓库及其 Wiki。

![根目录结构](http://img.blog.csdn.net/20170917160200390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQWxpZ3VhZ3Vh/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

每个结构对应的介绍：

File 文件     | Purpose 用途
-------- | ---
e2e/|在e2e/下是端到端（end-to-end）测试。 它们不在src/下，是因为端到端测试实际上和应用是相互独立的，它只适用于测试你的应用而已。 这也就是为什么它会拥有自己的tsconfig.json。
node_modules/|Node.js创建了这个文件夹，并且把package.json中列举的所有第三方模块都放在其中。
.angular-cli.json|Angular CLI的配置文件。 在这个文件中，我们可以设置一系列默认值，还可以配置项目编译时要包含的那些文件。 要了解更多，请参阅它的官方文档。
.editorconfig|给你的编辑器看的一个简单配置文件，它用来确保参与你项目的每个人都具有基本的编辑器配置。 大多数的编辑器都支持.editorconfig文件，详情参见 http://editorconfig.org 。
.gitignore|一个Git的配置文件，用来确保某些自动生成的文件不会被提交到源码控制系统中。
karma.conf.js|给Karma的单元测试配置，当运行ng test时会用到它。
package.json|npm配置文件，其中列出了项目使用到的第三方依赖包。 你还可以在这里添加自己的自定义脚本。
protractor.conf.js|给Protractor使用的端到端测试配置文件，当运行ng e2e的时候会用到它。
README.md|项目的基础文档，预先写入了CLI命令的信息。 别忘了用项目文档改进它，以便每个查看此仓库的人都能据此构建出你的应用。
tsconfig.json|TypeScript编译器的配置，你的IDE会借助它来给你提供更好的帮助。
tslint.json|给TSLint和Codelyzer用的配置信息，当运行ng lint时会用到。 Lint功能可以帮你保持代码风格的统一。


----------


>由于src目录下有很多重要的文件，所有的Angular组件、模板、样式、图片以及你的应用所需的任何东西都在这里。 这个文件夹之外的文件都是为构建应用提供支持用的。
>**注意：通过命令行工具生成目录结构是按照一定的规则来生成的，如果随意改变文件名或者目录结构，很可能会导致命令行工具其他功能不能使用。Angular没有那么灵活**

![src的目录结构](http://img.blog.csdn.net/20170917161356999?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQWxpZ3VhZ3Vh/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

File 文件     | Purpose 用途
-------- | ---
app/app.component.{ts,html,css,spec.ts}|使用HTML模板、CSS样式和单元测试定义AppComponent组件。 它是根组件，随着应用的成长它会成为一棵组件树的根节点。
app/app.module.ts|定义AppModule，这个根模块会告诉Angular如何组装该应用。 目前，它只声明了AppComponent。 稍后它还会声明更多组件。
assets/*|这个文件夹下你可以放图片等任何东西，在构建应用时，它们全都会拷贝到发布包中。
environments/*|这个文件夹中包括为各个目标环境准备的文件，它们导出了一些应用中要用到的配置变量。 这些文件会在构建应用时被替换。 比如你可能在产品环境中使用不同的API端点地址，或使用不同的统计Token参数。 甚至使用一些模拟服务。 所有这些，CLI都替你考虑到了。
favicon.ico|每个网站都希望自己在书签栏中能好看一点。 请把它换成你自己的图标。
index.html|这是别人访问你的网站是看到的主页面的HTML文件。 大多数情况下你都不用编辑它。 在构建应用时，CLI会自动把所有js和css文件添加进去，所以你不必在这里手动添加任何 script 或 link 标签。
main.ts|这是应用的主要入口点。 使用JIT compiler编译器编译本应用，并启动应用的根模块AppModule，使其运行在浏览器中。 你还可以使用AOT compiler编译器，而不用修改任何代码 —— 只要给ng build 或 ng serve 传入 --aot 参数就可以了。
polyfills.ts|不同的浏览器对Web标准的支持程度也不同。 填充库（polyfill）能帮我们把这些不同点进行标准化。 你只要使用core-js 和 zone.js通常就够了，不过你也可以查看浏览器支持指南以了解更多信息。
styles.css|这里是你的全局样式。 大多数情况下，你会希望在组件中使用局部样式，以利于维护，不过那些会影响你整个应用的样式你还是需要集中存放在这里。
test.ts|这是单元测试的主要入口点。 它有一些你不熟悉的自定义配置，不过你并不需要编辑这里的任何东西。
tsconfig.{app&#124;spec}.json|TypeScript编译器的配置文件。


----------
## 组件
>组件的必备元素
![组件的必备元素](http://img.blog.csdn.net/20170917170726801?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQWxpZ3VhZ3Vh/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

## 步骤三：启动项目
在创建的项目根目录下，输入
```
ng serve --open
```
>ng serve命令会启动开发服务器，监听文件变化，并在修改这些文件时重新构建此应用。使用--open（或-o）参数可以自动打开浏览器并访问http://localhost:4200/

效果如下：
![默认的首页](http://img.blog.csdn.net/20170917182723068?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQWxpZ3VhZ3Vh/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

可以试着更改代码：
在src/app/app/component.ts中定义了默认组件

```
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'app';
}
```
这个组件会显示到index.html页面中的app-root标签中，html代码来自app.component.html模板内容，css引自app.component.css。后面定义的一个就是控制器，属性只有一个title，可以改变title的内容，刷新页面对应的内容就会改变。









































